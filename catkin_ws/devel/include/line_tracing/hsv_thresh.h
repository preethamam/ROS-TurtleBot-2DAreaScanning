// Generated by gencpp from file line_tracing/hsv_thresh.msg
// DO NOT EDIT!


#ifndef LINE_TRACING_MESSAGE_HSV_THRESH_H
#define LINE_TRACING_MESSAGE_HSV_THRESH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_tracing
{
template <class ContainerAllocator>
struct hsv_thresh_
{
  typedef hsv_thresh_<ContainerAllocator> Type;

  hsv_thresh_()
    : k_size(0)
    , e_size(0)
    , d_size(0)
    , lowH(0)
    , highH(0)
    , lowS(0)
    , highS(0)
    , lowV(0)
    , highV(0)  {
    }
  hsv_thresh_(const ContainerAllocator& _alloc)
    : k_size(0)
    , e_size(0)
    , d_size(0)
    , lowH(0)
    , highH(0)
    , lowS(0)
    , highS(0)
    , lowV(0)
    , highV(0)  {
  (void)_alloc;
    }



   typedef uint8_t _k_size_type;
  _k_size_type k_size;

   typedef uint8_t _e_size_type;
  _e_size_type e_size;

   typedef uint8_t _d_size_type;
  _d_size_type d_size;

   typedef uint8_t _lowH_type;
  _lowH_type lowH;

   typedef uint8_t _highH_type;
  _highH_type highH;

   typedef uint8_t _lowS_type;
  _lowS_type lowS;

   typedef uint8_t _highS_type;
  _highS_type highS;

   typedef uint8_t _lowV_type;
  _lowV_type lowV;

   typedef uint8_t _highV_type;
  _highV_type highV;





  typedef boost::shared_ptr< ::line_tracing::hsv_thresh_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_tracing::hsv_thresh_<ContainerAllocator> const> ConstPtr;

}; // struct hsv_thresh_

typedef ::line_tracing::hsv_thresh_<std::allocator<void> > hsv_thresh;

typedef boost::shared_ptr< ::line_tracing::hsv_thresh > hsv_threshPtr;
typedef boost::shared_ptr< ::line_tracing::hsv_thresh const> hsv_threshConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_tracing::hsv_thresh_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_tracing::hsv_thresh_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace line_tracing

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'line_tracing': ['/home/turtlebot/catkin_ws/src/line_tracing/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::line_tracing::hsv_thresh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_tracing::hsv_thresh_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_tracing::hsv_thresh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_tracing::hsv_thresh_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_tracing::hsv_thresh_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_tracing::hsv_thresh_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_tracing::hsv_thresh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a5aabfc8bbb0749ec67edd76bf4b306";
  }

  static const char* value(const ::line_tracing::hsv_thresh_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a5aabfc8bbb0749ULL;
  static const uint64_t static_value2 = 0xec67edd76bf4b306ULL;
};

template<class ContainerAllocator>
struct DataType< ::line_tracing::hsv_thresh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_tracing/hsv_thresh";
  }

  static const char* value(const ::line_tracing::hsv_thresh_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_tracing::hsv_thresh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 k_size\n\
uint8 e_size\n\
uint8 d_size\n\
uint8 lowH\n\
uint8 highH\n\
uint8 lowS\n\
uint8 highS\n\
uint8 lowV\n\
uint8 highV\n\
";
  }

  static const char* value(const ::line_tracing::hsv_thresh_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_tracing::hsv_thresh_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.k_size);
      stream.next(m.e_size);
      stream.next(m.d_size);
      stream.next(m.lowH);
      stream.next(m.highH);
      stream.next(m.lowS);
      stream.next(m.highS);
      stream.next(m.lowV);
      stream.next(m.highV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hsv_thresh_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_tracing::hsv_thresh_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_tracing::hsv_thresh_<ContainerAllocator>& v)
  {
    s << indent << "k_size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.k_size);
    s << indent << "e_size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.e_size);
    s << indent << "d_size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.d_size);
    s << indent << "lowH: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lowH);
    s << indent << "highH: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.highH);
    s << indent << "lowS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lowS);
    s << indent << "highS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.highS);
    s << indent << "lowV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lowV);
    s << indent << "highV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.highV);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_TRACING_MESSAGE_HSV_THRESH_H
