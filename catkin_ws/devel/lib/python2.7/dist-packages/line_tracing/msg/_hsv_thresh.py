# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from line_tracing/hsv_thresh.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hsv_thresh(genpy.Message):
  _md5sum = "0a5aabfc8bbb0749ec67edd76bf4b306"
  _type = "line_tracing/hsv_thresh"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 k_size
uint8 e_size
uint8 d_size
uint8 lowH
uint8 highH
uint8 lowS
uint8 highS
uint8 lowV
uint8 highV
"""
  __slots__ = ['k_size','e_size','d_size','lowH','highH','lowS','highS','lowV','highV']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       k_size,e_size,d_size,lowH,highH,lowS,highS,lowV,highV

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hsv_thresh, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.k_size is None:
        self.k_size = 0
      if self.e_size is None:
        self.e_size = 0
      if self.d_size is None:
        self.d_size = 0
      if self.lowH is None:
        self.lowH = 0
      if self.highH is None:
        self.highH = 0
      if self.lowS is None:
        self.lowS = 0
      if self.highS is None:
        self.highS = 0
      if self.lowV is None:
        self.lowV = 0
      if self.highV is None:
        self.highV = 0
    else:
      self.k_size = 0
      self.e_size = 0
      self.d_size = 0
      self.lowH = 0
      self.highH = 0
      self.lowS = 0
      self.highS = 0
      self.lowV = 0
      self.highV = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.k_size, _x.e_size, _x.d_size, _x.lowH, _x.highH, _x.lowS, _x.highS, _x.lowV, _x.highV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.k_size, _x.e_size, _x.d_size, _x.lowH, _x.highH, _x.lowS, _x.highS, _x.lowV, _x.highV,) = _get_struct_9B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.k_size, _x.e_size, _x.d_size, _x.lowH, _x.highH, _x.lowS, _x.highS, _x.lowV, _x.highV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.k_size, _x.e_size, _x.d_size, _x.lowH, _x.highH, _x.lowS, _x.highS, _x.lowV, _x.highV,) = _get_struct_9B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
